require('dotenv').config();
const fs = require('fs');
const path = require('path');
const TelegramBot = require('node-telegram-bot-api');
const { google } = require('googleapis');
const { GoogleGenerativeAI } = require('@google/generative-ai');

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

bot.setMyCommands([
  { command: '/join', description: '–î–æ–¥–∞—Ç–∏—Å—è –¥–æ —Å–ø–∏—Å–∫—É –ø—ñ–¥–∞—Ä–∞—Å—ñ–≤' },
  { command: '/person', description: '–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ–¥–∞—Ä–∞—Å–∞ –¥–Ω—è' },
  { command: '/all', description: '–ü–æ–∫–∞–∑–∞—Ç–∏ —É—Å—ñ—Ö –ø—ñ–¥–∞—Ä–∞—Å—ñ–≤' },
  { command: '/whoami', description: '–î—ñ–∑–Ω–∞—Ç–∏—Å—å —è–∫–∏–π —è –ø—ñ–¥–∞—Ä–∞—Å' }
]);

const auth = new google.auth.GoogleAuth({
  keyFile: 'credentials.json',
  scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

const SPREADSHEET_ID = process.env.GOOGLE_SHEET_ID;
const PARTICIPANTS_RANGE = (chatId) => `'${chatId}'!A2:A`;
const STATUS_RANGE = (chatId) => `'${chatId}'!D2:D4`;

async function getSheetsClient() {
  const client = await auth.getClient();
  return google.sheets({ version: 'v4', auth: client });
}

// –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å: –æ—Å—Ç–∞–Ω–Ω—è –ª—é–¥–∏–Ω–∞, —á–∞—Å, –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤
async function getStatus(chatId) {
  const sheets = await getSheetsClient();
  const res = await sheets.spreadsheets.values.get({
    spreadsheetId: SPREADSHEET_ID,
    range: STATUS_RANGE(chatId),
  });
  const values = res.data.values || [];
  return {
    person: values[0]?.[0] || '',
    timestamp: values[1]?.[0] || '',
    participantCount: parseInt(values[2]?.[0] || '0', 10),
  };
}

// –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å
async function updateStatus(chatId, person, timestamp, participantCount) {
  const sheets = await getSheetsClient();
  await sheets.spreadsheets.values.update({
    spreadsheetId: SPREADSHEET_ID,
    range: STATUS_RANGE(chatId),
    valueInputOption: 'USER_ENTERED',
    requestBody: {
      values: [
        [person],
        [timestamp],
        [participantCount.toString()],
      ],
    },
  });
}

// –î–æ–¥–∞—Ç–∏ –ª—é–¥–∏–Ω—É
async function addPerson(chatId, name) {
  const sheets = await getSheetsClient();
  const res = await sheets.spreadsheets.values.get({
    spreadsheetId: SPREADSHEET_ID,
    range: PARTICIPANTS_RANGE(chatId),
  });

  const rows = res.data.values || [];
  const isAlreadyInList = rows.some(row => row[0].trim().toLowerCase() === name.trim().toLowerCase());

  if (isAlreadyInList) {
    return { success: false, message: `üëÄ –ü—ñ–¥–∞—Ä–∞—Å ${name} –≤–∂–µ —î —É —Å–ø–∏—Å–∫—É.` };
  }

  await sheets.spreadsheets.values.append({
    spreadsheetId: SPREADSHEET_ID,
    range: `'${chatId}'!A:A`,
    valueInputOption: 'USER_ENTERED',
    requestBody: {
      values: [[name]],
    },
  });

  const updatedCount = rows.length + 1;
  await updateStatus(chatId, '', '', updatedCount);

  return { success: true, message: `‚úÖ ${name} –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É –ø—ñ–¥–∞—Ä–∞—Å—ñ–≤!` };
}

// –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ–¥–∞—Ä–∞—Å–∞ –¥–Ω—è
async function getPersonOfTheMoment(chatId) {
  const sheets = await getSheetsClient();
  const res = await sheets.spreadsheets.values.get({
    spreadsheetId: SPREADSHEET_ID,
    range: PARTICIPANTS_RANGE(chatId),
  });

  const participants = res.data.values || [];
  if (participants.length === 0) {
    return { message: 'üö´ –£ —Ç–∞–±–ª–∏—Ü—ñ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ—ó –ª—é–¥–∏–Ω–∏!', person: null };
  }

  const status = await getStatus(chatId);
  const currentCount = participants.length;

  const today = new Date().toISOString().slice(0, 10);
  const lastPickDay = (status.timestamp || '').slice(0, 10);
  const isNewDay = today !== lastPickDay;
  const isCountChanged = currentCount !== status.participantCount;

  if (!isNewDay && !isCountChanged && status.person) {
    return {
      message: `üëÄ –ü—ñ–¥–∞—Ä–∞—Å –¥–Ω—è –≤–∂–µ –æ–±—Ä–∞–Ω–∏–π —Ä–∞–Ω—ñ—à–µ: *${status.person}*! –î–æ–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –ø—ñ–¥–∞—Ä–∞—Å–∞ –∞–±–æ –¥–æ—á–µ–∫–∞–π—Ç–µ—Å—å –Ω–æ–≤–æ–≥–æ –¥–Ω—è`,
      person: status.person,
    };
  }

  const randomIndex = Math.floor(Math.random() * participants.length);
  const chosenOne = participants[randomIndex][0];
  const now = new Date().toISOString();

  await updateStatus(chatId, chosenOne, now, currentCount);

  return {
    message: `üéâ –ü—ñ–¥–∞—Ä–∞—Å –¥–Ω—è: *${chosenOne}*!`,
    person: chosenOne,
  };
}

// –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç —á–µ—Ä–µ–∑ Gemini 1.5 flash
async function getJokeWithName(name) {
  const model = genAI.getGenerativeModel({ model: 'models/gemini-1.5-flash' });
  const prompt = `–¢–∏ –≤—ñ–¥–æ–º–∏–π –ø–æ–ø—É–ª—è—Ä–Ω–∏–π —Å—Ç–µ–Ω–¥–∞–ø –∫–æ–º—ñ–∫, –Ω–∞–ø–∏—à–∏ –Ω–∞–π–∫—Ä–∞—â–∏–π —Ç–∞ –Ω–∞–π—Å–º—ñ—à–Ω—ñ—à–∏–π –∂–∞—Ä—Ç –ø—Ä–æ ${name}. –ê–Ω–µ–∫–¥–æ—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∞–±—Å—É—Ä–¥–Ω–∏–º –∑ —á–æ—Ä–Ω–∏–º –≥—É–º–æ—Ä–æ–º —ñ –º–æ–∂–Ω–∞ –º–∞—Ç—é–∫–∏. –¢–∞–∫–æ–∂ –≤—ñ–Ω –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —Å–∏–ª—å–Ω–æ –¥–æ–≤–≥–∏–º`;
  const result = await model.generateContent(prompt);
  const response = await result.response;
  return response.text();
}

// –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤ —á–∞—Ç—É
async function getAllParticipants(chatId) {
  const sheets = await getSheetsClient();
  const res = await sheets.spreadsheets.values.get({
    spreadsheetId: SPREADSHEET_ID,
    range: PARTICIPANTS_RANGE(chatId),
  });
  const participants = res.data.values || [];
  if (participants.length === 0) return 'üö´ –£ —Ç–∞–±–ª–∏—Ü—ñ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ—ó –ª—é–¥–∏–Ω–∏!';
  return participants.map((p, i) => `${i + 1}. ${p[0]}`).join('\n');
}

const photoPaths = [
  path.join(__dirname, 'images/1.jpg'),
  path.join(__dirname, 'images/2.jpg'),
  path.join(__dirname, 'images/3.jpg'),
  path.join(__dirname, 'images/4.jpg'),
  path.join(__dirname, 'images/5.jpg'),
  path.join(__dirname, 'images/6.jpg'),
];

// –ö–æ–º–∞–Ω–¥–∞ /person
bot.onText(/\/(person|–ª—é–¥–∏–Ω–∞)/i, async (msg) => {
  const chatId = msg.chat.id.toString();
  const result = await getPersonOfTheMoment(chatId);

  const randomPhoto = photoPaths[Math.floor(Math.random() * photoPaths.length)];

  await bot.sendPhoto(chatId, fs.createReadStream(randomPhoto), {
    caption: result.message,
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [[
        { text: 'üòÇ –ê–Ω–µ–∫–¥–æ—Ç –ø—Ä–æ –Ω—å–æ–≥–æ', callback_data: 'anegdot' },
      ]],
    },
  });
});

// –ö–æ–º–∞–Ω–¥–∞ /join
bot.onText(/\/join/i, async (msg) => {
  const chatId = msg.chat.id.toString();
  const username = msg.from.first_name + (msg.from.last_name ? ' ' + msg.from.last_name : '');
  const result = await addPerson(chatId, username);
  await bot.sendMessage(chatId, result.message);
});

// –ö–æ–º–∞–Ω–¥–∞ /all
bot.onText(/\/all/i, async (msg) => {
  const chatId = msg.chat.id.toString();
  const allUsersList = await getAllParticipants(chatId);
  await bot.sendMessage(chatId, `üìã –°–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –ø—ñ–¥–∞—Ä–∞—Å—ñ–≤:\n\n${allUsersList}`);
});

// –ö–æ–º–∞–Ω–¥–∞ /whoami
bot.onText(/\/whoami/, async (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from.first_name + (msg.from.last_name ? ' ' + msg.from.last_name : '');
  await bot.sendMessage(chatId, `üßê ${username}, —Ç–∏ ‚Äî –ª—é–±–æ–ø–∏—Ç–Ω–∏–π –ø—ñ–¥–∞—Ä–∞—Å üòè`);
});

// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id.toString();
  const data = query.data;

  if (data === 'anegdot') {
    const status = await getStatus(chatId);
    const name = status.person;

    if (!name) {
      await bot.sendMessage(chatId, 'üòï –©–µ –Ω–µ –æ–±—Ä–∞–Ω–æ –ø—ñ–¥–∞—Ä–∞—Å–∞ –¥–Ω—è.');
      return;
    }

    try {
      const joke = await getJokeWithName(name);
      await bot.sendMessage(chatId, `üòÇ –ê–Ω–µ–∫–¥–æ—Ç –ø—Ä–æ –ø—ñ–¥–∞—Ä–∞—Å–∞ *${name}*:\n\n${joke}`, { parse_mode: 'Markdown' });
    } catch (err) {
      console.error(err);
      await bot.sendMessage(chatId, 'üò¨ –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞–Ω–µ–∫–¥–æ—Ç–∞.');
    }
  }
});
